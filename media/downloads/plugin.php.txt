<?php
/**
 * Send an email to the author.
 * 
 * @package Comment Notifier
 * @author fireyy
 * @version 1.0.0
 * @link http://fireyy.com
 */
class CommentNotifier_Plugin implements Typecho_Plugin_Interface
{
  /**
   * 激活插件方法,如果激活失败,直接抛出异常
   * 
   * @access public
   * @return void
   * @throws Typecho_Plugin_Exception
   */
  public static function activate()
  {
    Typecho_Plugin::factory('Widget_Feedback')->finishComment = array('CommentNotifier_Plugin', 'mailNotify');
  }

  /**
   * 禁用插件方法,如果禁用失败,直接抛出异常
   * 
   * @static
   * @access public
   * @return void
   * @throws Typecho_Plugin_Exception
   */
  public static function deactivate(){}

  /**
   * 获取插件配置面板
   * 
   * @access public
   * @param Typecho_Widget_Helper_Form $form 配置面板
   * @return void
   */
  public static function config(Typecho_Widget_Helper_Form $form){}

  /**
   * 个人用户的配置面板
   * 
   * @access public
   * @param Typecho_Widget_Helper_Form $form
   * @return void
   */
  public static function personalConfig(Typecho_Widget_Helper_Form $form){}

  /**
   * 发送邮件通知
   * 
   * @access public
   * @param array $comment 评论结构
   * @return void
   */
  public static function mailNotify($comment)
  {
    $mdb = Typecho_Db::get ();

    /* notify author */
    $postAuthor = $mdb->fetchRow($mdb->select()
                                     ->from('table.users')
                                     ->where('uid = ?', $comment->ownerId)
                                     ->limit(1));

    if ($postAuthor['mail'] != $comment->mail) {
      CommentNotifier_Plugin::mailPostAuthor ($postAuthor['mail'], $comment);
    }

    $c = $comment;
    $sent[] = $postAuthor['mail'];
    $sent[] = $comment->mail;
    $parent = $c->parent;
    while ($parent) {
      $parentComment = $mdb->fetchRow($mdb->select()
                           ->from('table.comments')
                           ->where('coid = ?', $parent)
                           ->limit(1));
      if (!in_array ($parentComment['mail'], $sent)) {
        CommentNotifier_Plugin::mailReply ($parentComment, $comment);
        $sent[] = $parentComment['mail'];
      }

      $parent = $parentComment['parent'];
    }

    return $comment;
  }

  protected static function mailPostAuthor($to, $comment)
  {
    $boundary = md5 (time ());
    $url = $comment->permalink;

    $mdb = Typecho_Db::get();

    $adurl = Typecho_Common::url('manage-comments.php', Helper::options()->adminUrl);
    $status = $comment->status == 'approved' ? ' approved' : ' UNAPPROVED';
    $title = sprintf(_t('[%1$s] New%3$s comment on: %2$s'), Helper::options()->title, $comment->title, $status);
    $t_text = "The following comment was added to the post ";

    $headers = array(
      'MIME-Version: 1.0',
      "Content-type: multipart/alternative; boundary=\"$boundary\"",
      'From: ' . '=?UTF-8?B?' . base64_encode($comment->author) . '?=' . ' <'.$comment->mail.'>',
    );
    $message = "--$boundary" . PHP_EOL;
    $message .= 'Content-Type: text/plain; charset=UTF-8' . PHP_EOL;
    $message .= 'Content-Transfer-Encoding: 8bit' . PHP_EOL . PHP_EOL; 
    $message .= $t_text.''.$comment->title.' '.$url;
    $message .= 'Author: '.$comment->author;
    $message .= ' ('.$comment->mail.')';
    $message .= 'URL: '.$comment->url;
    $message .= $comment->text;
    $message .= '-----';
    $message .= 'Moderate comments: '.$adurl;

    $message .= PHP_EOL . "--$boundary" . PHP_EOL;
    $message .= 'Content-Type: text/html; charset=UTF-8' . PHP_EOL;
    $message .= 'Content-Transfer-Encoding: 8bit' . PHP_EOL . PHP_EOL; 
    $message .= '<p>'.$t_text.' <a href="'.$url.'" target="_blank">'.$comment->title.'</a></p>';
    $message .= '<p>Author: '.$comment->author;
    if(!$reply2) $message .= ' ('.$comment->mail.')';
    $message .= '</p><p>URL: '.$comment->url.'</p>';
    $message .= '<p>'.$comment->text.'</p>';
    $message .= '<p>-----</p>';
    $message .= '<p>Moderate comments: <a href="'.$adurl.'" target="_blank">'.$adurl.'</a></p>';

    $message .= PHP_EOL . "--$boundary--" . PHP_EOL;

    mail($to, '=?UTF-8?B?' . base64_encode($title) . '?=', $message, implode(PHP_EOL, $headers));
  }

  protected static function mailReply ($parentComment, $comment)
  {
    $boundary = md5 (time ());
    $url = $comment->permalink;

    $to = $parentComment['mail'];

    $mdb = Typecho_Db::get();

    $title = sprintf(_t('[%1$s] You have a new reply on: %2$s'), Helper::options()->title, $comment->title);
    $t_text = "You have a new reply on ";
    $headers = array(
      'MIME-Version: 1.0',
      "Content-type: multipart/alternative; boundary=\"$boundary\"",
      'From: ' . '=?UTF-8?B?' . base64_encode($comment->author) . '?=' . ' <'.$comment->mail.'>',
    );
    $message = "--$boundary" . PHP_EOL;
    $message .= 'Content-Type: text/plain; charset=UTF-8' . PHP_EOL;
    $message .= 'Content-Transfer-Encoding: 8bit' . PHP_EOL . PHP_EOL; 
    $message .= $t_text.''.$comment->title.' '.$url;
    $message .= 'Author: '.$comment->author;
    $message .= 'URL: '.$comment->url;
    $message .= $comment->text;
    $message .= '-----';
    $message .= 'Your comments: ';
    $message .= $parentComment['text'];

    $message .= PHP_EOL . "--$boundary" . PHP_EOL;
    $message .= 'Content-Type: text/html; charset=UTF-8' . PHP_EOL;
    $message .= 'Content-Transfer-Encoding: 8bit' . PHP_EOL . PHP_EOL; 
    $message .= '<p>'.$t_text.' <a href="'.$url.'" target="_blank">'.$comment->title.'</a></p>';
    $message .= '<p>Author: '.$comment->author;
    $message .= '</p><p>URL: '.$comment->url.'</p>';
    $message .= '<p>'.$comment->text.'</p>';
    $message .= '<p>-----</p>';
    $message .= '<p>Your comments: </p>';
    $message .= '<p>'.$parentComment['text'].'</p>';

    $message .= PHP_EOL . "--$boundary--" . PHP_EOL;

    mail($to, '=?UTF-8?B?' . base64_encode($title) . '?=', $message, implode(PHP_EOL, $headers));
  }
}
